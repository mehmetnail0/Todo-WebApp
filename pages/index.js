import Head from 'next/head';
import React, { useState, useEffect } from 'react';
import styles from '../styles/Home.module.css';
import { Form, Container, Col, Row } from 'react-bootstrap';
import CategoryModal from '../components/CategoryModal';
import EditModal from '../components/EditModal';
import TodoCard from '../components/Card';
import {useRouter} from "next/router"

export default function Home() {
  const [todos, setTodos] = useState([]);
  const [todoValue, setTodoValue] = useState('');
  const [searchValue, setSearchValue] = useState('');
  const [filteredCategory, setFilteredCategory] = useState('choose');
  const [categories, setCategories] = useState([]);
  const [categoryModalShow, setCategoryModalShow] = useState(false);
  const [editModalShow, setEditModalShow] = useState(false);
  const [editableTodo, setEditableTodo] = useState([{}]);
  const Router = useRouter()
  useEffect(() => {
    if (localStorage.getItem('todos')) {
      setTodos(JSON.parse(localStorage.getItem('todos')));
    }
  }, []);

  useEffect(() => {
    localStorage.setItem('todos', JSON.stringify(todos));
  }, [todos.length]);

  const handleSubmit = (e) => {
    e.preventDefault();
    if(todoValue === "") {
      document.getElementById("addTodoInput").placeholder = "Write a Todo !"
      document.getElementById("addTodoInput").className = "form-control form validate"
    } else {
      setTodos([
        ...todos,
        { name: todoValue, id: Date.now(), todoCategories: [] },
      ]);
      setTodoValue('');
      document.getElementById("addTodoInput").placeholder = "Write a Todo"
      document.getElementById("addTodoInput").className = "form-control form"
    }
  };
  const deleteTodo = (e, todo) => {
    e.preventDefault();
    setTodos(todos.filter((item) => item.id !== todo.id));
  };
  const categoriesModal = (e) => {
    e.preventDefault();
    setCategoryModalShow(true);
  };
  const renderEditModal = () => {
    return (
      <EditModal
        todos={todos}
        setTodos={setTodos}
        todo={editableTodo}
        show={editModalShow}
        onHide={() => setEditModalShow(false)}
        categories={categories}
        handleTodoCategories={handleTodoCategories}
      />
    );
  };
  const editModal = (e) => {
    e.preventDefault();
    setEditableTodo(todos.filter((item) => item.id == e.target.id)[0]);
    setEditModalShow(true);
  };

  const handleTodoCategories = (e, category, todo) => {
    let tempTodos = [...todos];
    let tempTodo = tempTodos[todos.indexOf(todo)];
    if (e.target.checked) {
      tempTodo.todoCategories = [
        ...tempTodo.todoCategories,
        { name: category.name, id: category.id },
      ];
      tempTodos[todos.indexOf(todo)] = tempTodo;
    } else {
      tempTodo.todoCategories = tempTodo.todoCategories.filter(
        (item) => item.id !== category.id
      );
      tempTodos[todos.indexOf(todo)] = tempTodo;
    }
    setTodos([...tempTodos]);
    localStorage.setItem('todos', JSON.stringify(todos));
  };

  const filterCategories = (e) => {
    setFilteredCategory(e.target.value);
  };

  const redirectPDF = () => {
    
    
  }

  return (
    <div className={styles.container}>
      <Head>
        <link
          href='https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/css/bootstrap.min.css'
          rel='stylesheet'
          integrity='sha384-wEmeIV1mKuiNpC+IOBjI7aAzPcEZeedi5yW5f2yOq55WWLwNGmvvx4Um1vskeMj0'
          crossOrigin='anonymous'
        />
        <title>Todo App</title>
        <meta name='description' content='Generated by create next app' />
        <meta httpEquiv="Content-type" content="text/html; charset=utf-8" />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <Container>
        <form className={styles.mainpageup}>
          <Row className={styles.mobilemainpageup}>
            <Col md="8" lg="8">
              <Row>
                <input
                  id="addTodoInput"
                  className="form-control form"
                  maxLength="200"
                  style={{ backgroundColor: '#cadbf4' }}
                  type='search'
                  placeholder='Write a Todo'
                  aria-label='Search'
                  value={todoValue}
                  onChange={(e) => setTodoValue(e.target.value)}
                />
              </Row>
              <Row>
                <input
                  className='form-control form'
                  maxLength="200"
                  style={{ backgroundColor: '#AFC9F0' }}
                  type='search'
                  placeholder='Search Todos'
                  aria-label='Search'
                  value={searchValue}
                  onChange={(e) => setSearchValue(e.target.value)}
                />
              </Row>
            </Col>
            <Col>
              <button
                className='todoButtons'
                type='submit'
                value='Submit'
                variant='primary'
                onClick={handleSubmit}
              >
                Add Todo
              </button>
              <Form.Control
                as='select'
                className='chooseCategory'
                id='inlineFormCustomSelect'
                custom
                onChange={(e) => filterCategories(e)}
              >
                <option className="optionValue" value='choose'>
                  Filter by Category
                </option>
                {categories.map((category, key) => {
                  return (
                    <option
                      key={key}
                      value={category.name}
                    >
                      {category.name}
                    </option>
                  );
                })}
              </Form.Control>
              
            </Col>
            <Col>
              <button
                className='todoButtons  categoriesButton'
                type='submit'
                value='Submit'
                variant='primary'
                onClick={(e) => categoriesModal(e)}
              >
                Categories Menu
              </button>
              <CategoryModal
                todos={todos}
                setTodos={setTodos}
                show={categoryModalShow}
                onHide={() => setCategoryModalShow(false)}
                categories={categories}
                setCategories={setCategories}
              />
              {editModalShow ? renderEditModal() : null}
            </Col>
          </Row>
        </form>
        {todos.map((todo) => {
          if (searchValue) {
            if (todo.name.includes(searchValue)) {
              return (
                <TodoCard
                  key={todo.id}
                  editModal={editModal}
                  todo={todo}
                  deleteTodo={deleteTodo}
                  todos={todos}
                />
              );
            }
          } else {
            if (filteredCategory != 'choose') {
              let filteredTodo = todo.todoCategories.filter(
                (item) => item.name == filteredCategory
              );
              if (filteredTodo[0]) {
                return (
                  <TodoCard
                    key={todo.id}
                    editModal={editModal}
                    todo={todo}
                    deleteTodo={deleteTodo}
                    todos={todos}
                    editableTodo={editableTodo}
                  />
                );
              }
            } else {
              return (
                <TodoCard
                  key={todo.id}
                  editModal={editModal}
                  todo={todo}
                  deleteTodo={deleteTodo}
                  todos={todos}
                  editableTodo={editableTodo}
                />
              );
            }
          }
        })}
        
  //      <a href="/pdf">Download PDF</a>
        
      </Container>
    </div>
  );
}
